#!__*__coding:utf-8__*__

#######################################
# 스타벅스 블로그 검색한 다음에 본문에서 명사만 추출하기
#######################################
from konlpy.tag import Kkma
import pandas as pd
import collections

######################################
# 판다스에서 읽은 엑셀파일에서 본문만 찾아서 하나로 합치기
######################################
file = r"스타벅스_블로그검색결과.xlsx"
df = pd.read_excel(file)
result = []
for i in range(len(df)):
    result.append(df.iloc[i].full_content)
result_str = ""

for i in result:
    result_str = result_str + " " + str(i)

######################################
# 큰 본문 문자열을 줄단위로 나눈다.
######################################
m = result_str.split("\r\n")

######################################
# 줄단위로 명사 추출.
# 줄단위로 추출된 명사는 nouns_list_s 리스트에 모두 들어간다.
######################################
k = Kkma()
nouns_list = []
for i in m:
    nouns_list.append(k.nouns(i))
nouns_list_s = []
for i in nouns_list:
    for j in i:
        nouns_list_s.append(j)


######################################
# 명사 갯수 세기
######################################
t = collections.Counter(nouns_list_s)


######################################
# 최상위 1000개
######################################
result = t.most_common(1000)


######################################
# 의미 없는 명사를 삭제하기 위한 나만의 사전 정의
######################################
remove = ["인쇄", "공감", "수", "스타벅스", "스타", "벅스", "글", "수", "2017", "취소", "공감", "태그저장", "댓", "태그", "수정", "복사",
         "확인", "사용", "최신전송", "저장", "번역", "댓글", "본문", "가능한", "로그", "11", "10", "어디", "기타"]

new_result = []
for i in result:
    if len(i[0]) == 1:  #명사 단어의 글자수가 1인 것은 의미가 없다고 간주하고 버려버린다.
        continue
    if i[0] in remove:  #의미 없는 명사사전에 들어있는 글자도 버려버린다.
        continue
    new_result.append(i)

######################################
# 마지막에 정리되어 있는 결과
######################################
print(new_result)

